--- coursera_submit.py	2015-02-21 04:32:02.149428556 +0100
+++ coursera_submit.dev.py	2015-03-05 17:58:46.225356391 +0100
@@ -1,3 +1,4 @@
+#!/usr/bin/env python3
 ########                                     ######## 
 # Hi there, curious student.                         #
 #                                                    #
@@ -30,6 +31,7 @@
 show_feedback = False
 login = None
 password = None
+dirPrefix = None
 
 ################ FOR VERIFYING SIGNATURE ON TESTS ################
 from collections import namedtuple
@@ -338,6 +340,8 @@
 def source(source_files):
     src = ['# submit version: %s\n' % SUBMIT_VERSION]
     for fn in source_files:
+        if dirPrefix != None:
+            fn = '%s%s%s' % (dirPrefix, os.sep, fn)
         src.append('# %s' % fn)
         with open(fn) as source_f:
             src.append(source_f.read())
@@ -349,6 +353,28 @@
 def canonicalize_key(key_value_pair):
     return tuple(map(lambda s:s.strip(), (key_value_pair[0].upper(), key_value_pair[1])))
 
+def parse_res_paths(res_paths):
+    valid_paths = []
+    if res_paths != profile_RES_to_list():
+        res_paths.extend(profile_RES_to_list())
+    for p in res_paths:
+        print('Validating \'' + p + '\' ... ', end='')
+        if os.path.isdir(p):
+            print('OK')
+            valid_paths.append(p)
+        else:
+            print('FAIL!')
+
+    if len(valid_paths) != len(res_paths):
+        print('You have at least one invalid path in your --resources list.')
+        cont = input('This may result in broken imports. Continue? [Y/n]: ')
+        if cont.lower() == 'n':
+            exit(1)
+    return valid_paths
+
+def profile_RES_to_list():
+    return [ s.replace('"','') for s in profile.get('RES', '').split(',') if s != '' ]
+
 if __name__ == '__main__':
     try:
         f = open("profile.txt")
@@ -362,6 +388,7 @@
             , 'numbers or ranges of problems/tasks to submit'
             , 'your username (you can make one up)'
             , 'your password (optional)'
+            , 'path(s) to resource folders, as list (optional, ["/absolute/paths", "or/relative/res"])'
             , 'your geographical location (optional, used for mapping activity)'
             , 'display tests without actually running them'
             , 'specify where to send the results'
@@ -373,6 +400,7 @@
     parser.add_argument('tasks', default=profile.get('TASKS',None), nargs='*', help=next(ihelp))
     parser.add_argument('--username', '--login', default=profile.get('USERNAME',None), help=next(ihelp))
     parser.add_argument('--password', default=profile.get('PASSWORD',None), help=next(ihelp))
+    parser.add_argument('--resources', default=profile_RES_to_list(), nargs='+', help=next(ihelp))
     parser.add_argument('--location', default=profile.get('LOCATION',None), help=next(ihelp))
     parser.add_argument('--dry-run', default=False, action='store_true', help=next(ihelp))
     parser.add_argument('--report', default=profile.get('REPORT',None), help=next(ihelp))
@@ -385,7 +413,13 @@
     parser.add_argument('--show-feedback', default=False, action='store_true', help=argparse.SUPPRESS)
 
     args = parser.parse_args()
-    asgn_name = os.path.splitext(args.assign)[0]
+    asgn_name = os.path.splitext(os.path.basename(args.assign))[0]
+    if os.path.dirname(args.assign) != '':
+        dirPrefix = os.path.dirname(args.assign)
+        sys.path.append(os.path.realpath(dirPrefix))
+    if args.resources != []:
+        print('Found resource path(s):')
+        sys.path.extend(parse_res_paths(args.resources))
     report = args.report
     location = args.location
     dry_run = args.dry_run
